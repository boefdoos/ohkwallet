<style>
        /* === CORE RESET === */
        /* Ensures all modals and backgrounds are opaque */
        .modal-content, 
        .token-display, 
        .history-table,
        .auth-container,
        .user-list,
        .user-item,
        .form-control,
        #loading-overlay .loading-content,
        .modal-content div,
        .modal-content form,
        .modal-content .form-group,
        .modal-content h2,
        .modal-content h3,
        .modal-content p,
        .token-card,
        .history-table th,
        .history-table td {
            background-color: #FFFFFF !important;
            backdrop-filter: none !important;
            -webkit-backdrop-filter: none !important;
            background-image: none !important;
            opacity: 1 !important;
        }
        
        /* Table headers consistent color */
        th {
            background-color: #F5F5F5 !important;
        }
        
        /* Token cards */
        .token-card {
            background-color: #F5F5F5 !important;
        }
        
        /* === BUTTON STYLE RESET === */
        /* Primary buttons - Blue with white text */
        .btn {
            background-color: #0076FF !important;
            color: white !important;
            border: none !important;
        }
        
        .btn:hover, 
        .btn:active,
        .btn:focus {
            background-color: #0062D6 !important;
            color: white !important;
        }
        
        /* Secondary buttons - Light gray with dark text */
        .btn-secondary {
            background-color: #F5F5F5 !important;
            color: #333333 !important;
            border: 1px solid #E0E0E0 !important;
        }
        
        .btn-secondary:hover,
        .btn-secondary:active,
        .btn-secondary:focus {
            background-color: #E0E0E0 !important;
            color: #333333 !important;
        }
        
        /* Danger buttons - Red with white text */
        .btn-danger {
            background-color: #E53935 !important;
            color: white !important;
        }
        
        .btn-danger:hover,
        .btn-danger:active,
        .btn-danger:focus {
            background-color: #C62828 !important;
            color: white !important;
        }
        </style><!DOCTYPE html>
<html lang="en">
<head>
    <!-- Add this style block inside the existing <head> section -->
<style>
    /* Enhanced Mobile Styles for Admin Dashboard */
    @media (max-width: 576px) {
        /* Adjust admin header for better mobile display */
        .dashboard-header > div:last-child {
            flex-direction: column;
            width: 100%;
        }
        
        .dashboard-header > div:last-child button {
            margin-bottom: 8px;
            width: 100%;
        }
        
        /* Fix heading display on mobile */
        .dashboard-header h1 {
            font-size: 18px;
            white-space: normal !important;
            line-height: 1.3;
        }
        
        .dashboard-header p {
            white-space: normal !important;
        }
        
        /* Improve user listing items on mobile */
        .user-item {
            flex-direction: column;
            align-items: flex-start;
        }
        
        .user-info {
            margin-bottom: 10px;
            width: 100%;
        }
        
        .user-info h3 {
            white-space: normal !important;
            word-wrap: break-word;
        }
        
        .user-info p {
            white-space: normal !important;
            word-wrap: break-word;
        }
        
        .user-stats {
            margin-bottom: 10px;
            display: flex;
            gap: 8px;
        }
        
        .user-actions {
            width: 100%;
        }
        
        .user-actions button {
            width: 100%;
            margin-top: 5px;
        }
        
        /* Improve search bar on mobile */
        .search-bar {
            margin-bottom: 15px;
        }
        
        .search-bar input {
            height: 48px; /* Larger tap target */
        }
        
        /* Remove forced white-space nowrap for text elements in admin panel */
        #adminContainer h1, 
        #adminContainer h2, 
        #adminContainer h3, 
        #adminContainer p {
            white-space: normal !important;
        }
        
        /* Modal improvements for mobile */
        .modal-content {
            padding: 20px 15px;
            margin: 5% auto;
            max-height: 85vh;
        }
    }
</style>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="theme-color" content="#FFFFFF">
    <title>My OHK Wallet - Reward System</title>
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        /* === CORE RESET === */
        /* Ensures all modals and backgrounds are opaque */
        .modal-content, 
        .token-display, 
        .history-table,
        .auth-container,
        .user-list,
        .user-item,
        .form-control,
        #loading-overlay .loading-content,
        .modal-content div,
        .modal-content form,
        .modal-content .form-group,
        .modal-content h2,
        .modal-content h3,
        .modal-content p,
        .token-card,
        .history-table th,
        .history-table td {
            background-color: #FFFFFF !important;
            backdrop-filter: none !important;
            -webkit-backdrop-filter: none !important;
            background-image: none !important;
            opacity: 1 !important;
        }
        
        /* Table headers consistent color */
        th {
            background-color: #F5F5F5 !important;
        }
        
        /* Token cards */
        .token-card {
            background-color: #F5F5F5 !important;
        }
        
        /* === BUTTON STYLE RESET === */
        /* Primary buttons - Blue with white text */
        .btn {
            background-color: #0076FF !important;
            color: white !important;
            border: none !important;
        }
        
        .btn:hover, 
        .btn:active,
        .btn:focus {
            background-color: #0062D6 !important;
            color: white !important;
        }
        
        /* Secondary buttons - Light gray with dark text */
        .btn-secondary {
            background-color: #F5F5F5 !important;
            color: #333333 !important;
            border: 1px solid #E0E0E0 !important;
        }
        
        .btn-secondary:hover,
        .btn-secondary:active,
        .btn-secondary:focus {
            background-color: #E0E0E0 !important;
            color: #333333 !important;
        }
        
        /* Danger buttons - Red with white text */
        .btn-danger {
            background-color: #E53935 !important;
            color: white !important;
        }
        
        .btn-danger:hover,
        .btn-danger:active,
        .btn-danger:focus {
            background-color: #C62828 !important;
            color: white !important;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <!-- Firebase App (the core Firebase SDK) -->
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
    <!-- Add Firebase Auth and Database -->
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-database-compat.js"></script>
    <style>
        :root {
            /* Simplified color scheme - just 3 colors */
            --primary: #0076FF;    /* Vibrant blue for buttons, headers */
            --background: #FFFFFF; /* Background color */
            --text: #333333;       /* Text color */
        }
        
        @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap');
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Roboto', sans-serif;
        }
        
        body {
            background: var(--background);
            color: var(--text);
            line-height: 1.6;
        }
        
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Poppins', sans-serif;
        }
        
        /* Remove theme toggle related code */
        
        .container {
            max-width: 1100px;
            margin: 0 auto;
            padding: 15px;
            width: 100%;
        }
        
        .auth-container {
            max-width: 500px;
            margin: 30px auto;
            padding: 25px 20px;
            background: var(--background);
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            width: 90%;
            border: 1px solid #E0E0E0;
        }
        
        .header {
            text-align: center;
            margin-bottom: 25px;
        }
        
        .header h1 {
            font-weight: 700;
            margin-bottom: 8px;
            color: var(--primary);
            font-size: 24px;
            white-space: nowrap;
        }
        
        .header p {
            color: var(--text);
            font-size: 14px;
            white-space: nowrap;
        }
        
        .tabs {
            display: flex;
            margin-bottom: 20px;
            border-radius: 6px;
            overflow: hidden;
            border: 1px solid #E0E0E0;
        }
        
        .tab {
            flex: 1;
            padding: 12px;
            text-align: center;
            background: #F5F5F5;
            cursor: pointer;
            transition: background 0.3s ease;
            color: var(--text);
            font-weight: 500;
            white-space: nowrap;
        }
        
        .tab:hover {
            background: #E0E0E0;
        }
        
        .tab.active {
            background: var(--primary);
            color: white;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 6px;
            font-weight: 500;
            color: var(--text);
            font-size: 14px;
        }
        
        .form-control {
            width: 100%;
            padding: 12px;
            border: 1px solid #E0E0E0;
            border-radius: 6px;
            font-size: 16px;
            background: var(--background);
            color: var(--text);
        }
        
        .form-control:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 2px rgba(74, 118, 184, 0.1);
        }
        
        .form-control::placeholder {
            color: #999999;
        }
        
        .btn {
            display: inline-block;
            padding: 16px 20px;
            background: var(--primary);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 16px;
            width: 100%;
            transition: all 0.3s ease;
            font-weight: 500;
            letter-spacing: 0.5px;
            position: relative;
            overflow: hidden;
            -webkit-tap-highlight-color: transparent;
            touch-action: manipulation;
        }
        
        .btn:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }
        
        .btn:active {
            transform: translateY(0);
        }
        
        .btn::after {
            content: "";
            position: absolute;
            top: 50%;
            left: 50%;
            width: 5px;
            height: 5px;
            background: rgba(255, 255, 255, 0.5);
            opacity: 0;
            border-radius: 100%;
            transform: scale(1, 1) translate(-50%);
            transform-origin: 50% 50%;
        }
        
        .btn:focus:not(:active)::after {
            animation: ripple 1s ease-out;
        }
        
        /* Mobile Responsive Styles */
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .header h1 {
                font-size: 22px;
            }
            
            .dashboard-header h1 {
                font-size: 20px;
            }
            
            .token-display {
                flex-direction: column;
            }
            
            .token-card {
                margin-bottom: 10px;
                min-width: 100%;
                flex: 1 0 100%;
            }
            
            /* Keep all text on one line */
            h1, h2, h3, p, .btn, .form-control, label, .tab {
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
            }
            
            /* Make the table scrollable horizontally */
            .history-table-container {
                overflow-x: auto;
                width: 100%;
                -webkit-overflow-scrolling: touch;
            }
            
            .history-table {
                min-width: 500px; /* Ensure table has minimum width */
            }
            
            /* Larger touch targets */
            .btn, .form-control, .tab {
                padding: 12px;
                min-height: 44px; /* Minimum touch target size */
            }
            
            .close {
                font-size: 28px;
                padding: 8px;
            }
            
            /* Better spacing for modals */
            .modal-content {
                margin: 5% auto;
                padding: 15px;
                width: 95%;
            }
            
            /* Quick token buttons */
            #quickAddBtn, #quickRemoveBtn {
                min-height: 52px;
            }
        }
        
        .btn-secondary {
            background: var(--secondary);
            color: var(--dark);
        }
        
        .btn-secondary:hover {
            background: rgba(0, 229, 255, 0.8);
        }
        
        .btn-danger {
            background: var(--danger);
        }
        
        .btn-danger:hover {
            background: rgba(255, 23, 68, 0.8);
        }
        
        .dashboard {
            display: none;
        }
        
        .admin-panel {
            display: none;
        }
        
        .dashboard-header {
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid #E0E0E0;
            gap: 15px;
        }
        
        .dashboard-header > div:last-child {
            width: 100%;
            display: flex;
            gap: 10px;
        }
        
        .dashboard-header h1 {
            font-size: 22px;
            margin-bottom: 5px;
            color: var(--primary);
            white-space: nowrap;
        }
        
        .dashboard-header p {
            color: var(--text);
            font-size: 14px;
            white-space: nowrap;
        }
        
        .token-display {
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;
            justify-content: space-between;
            background: var(--background);
            padding: 15px;
            border-radius: 6px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            margin-bottom: 20px;
            border: 1px solid #E0E0E0;
            gap: 15px;
        }
        
        .token-card {
            text-align: center;
            padding: 15px;
            background: #F5F5F5;
            border-radius: 6px;
            flex: 1 0 calc(33.333% - 15px);
            min-width: 100px;
            margin: 0;
            border: 1px solid #E0E0E0;
        }
        
        .token-card p {
            color: var(--text);
            font-size: 14px;
            margin-bottom: 5px;
            white-space: nowrap;
        }
        
        .token-card h3 {
            color: var(--primary);
            font-size: 28px;
            margin: 10px 0;
            font-weight: 700;
        }
        
        .history-table {
            width: 100%;
            border-collapse: collapse;
            background: var(--modal-bg);
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            border: 1px solid var(--border-color);
        }
        
        .history-table th, .history-table td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
            color: var(--light-text);
        }
        
        .history-table th {
            background: var(--card-bg);
            font-weight: 600;
            color: var(--light);
        }
        
        .history-table th, .history-table td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        .history-table th {
            background: #f8f9fa;
            font-weight: 600;
        }
        
        .user-list {
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            margin-bottom: 30px;
        }
        
        .user-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            border-bottom: 1px solid #eee;
        }
        
        .user-info {
            flex: 1;
        }
        
        .user-actions {
            display: flex;
            gap: 10px;
        }
        
        .badge {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 50px;
            font-size: 14px;
            font-weight: 600;
        }
        
        .badge-primary {
            background: var(--primary);
            color: white;
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }
        
        .modal-content {
            background-color: var(--modal-bg);
            margin: 10% auto;
            padding: 25px 20px;
            border-radius: 15px;
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3), var(--neon-glow);
            position: relative;
            border: 1px solid var(--border-color);
            color: var(--light-text);
        }
        
        .modal-content h2, .modal-content h3 {
            color: var(--primary);
            margin-bottom: 15px;
            text-shadow: var(--text-shadow);
        }
        
        .close {
            position: absolute;
            right: 15px;
            top: 10px;
            font-size: 24px;
            cursor: pointer;
            color: var(--light-text);
            width: 30px;
            height: 30px;
            text-align: center;
            line-height: 30px;
            border-radius: 50%;
            transition: all 0.3s ease;
        }
        
        .close:hover {
            background: rgba(255, 255, 255, 0.1);
        }
        
        .close {
            position: absolute;
            right: 15px;
            top: 10px;
            font-size: 24px;
            cursor: pointer;
        }
        
        .search-bar {
            margin-bottom: 20px;
        }
        
        .search-bar input {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
        }
        
        .alert {
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 5px;
            color: white;
            display: none;
        }
        
        .alert-success {
            background-color: var(--success);
        }
        
        .alert-danger {
            background-color: var(--danger);
        }

        .loading {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            width: 36px;
            height: 36px;
            border-radius: 50%;
            border-left-color: var(--primary);
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        #loading-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 9999;
        }

        #loading-overlay .loading-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: var(--modal-bg);
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            border: 1px solid var(--border-color);
            color: var(--light-text);
            max-width: 90%;
        }
        
        .spinner {
            border: 4px solid rgba(255, 255, 255, 0.1);
            width: 36px;
            height: 36px;
            border-radius: 50%;
            border-left-color: var(--primary);
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
        }
        
        .status-bar {
            background-color: var(--modal-bg);
            padding: 4px 6px;
            font-size: 12px;
            border-bottom: 1px solid var(--border-color);
            position: fixed;
            bottom: 0;
            right: 0;
            z-index: 90;
            width: auto;
            border-top-left-radius: 8px;
            opacity: 0.8;
            transition: opacity 0.3s ease;
        }
        
        .status-bar:hover {
            opacity: 1;
        }
        
        .status-connected {
            color: var(--success);
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .status-connected::before {
            content: "";
            display: inline-block;
            width: 8px;
            height: 8px;
            background-color: var(--success);
            border-radius: 50%;
        }
        
        .status-disconnected {
            color: var(--danger);
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .status-disconnected::before {
            content: "";
            display: inline-block;
            width: 8px;
            height: 8px;
            background-color: var(--danger);
            border-radius: 50%;
        }
        
        .connection-info {
            display: none;
        }
        
        .status-bar:hover .connection-info {
            display: block;
            color: var(--gray);
            font-size: 11px;
            margin-top: 3px;
        }
    </style>
</head>
<body>
    <!-- Connection Status Bar -->
    <div class="status-bar" id="statusBar">
        <span id="connectionStatus">Connecting...</span>
        <div class="connection-info" id="connectionInfo"></div>
    </div>
    
    <!-- Loading Overlay -->
    <div id="loading-overlay">
        <div class="loading-content">
            <div class="spinner"></div>
            <p id="loadingMessage">Loading data...</p>
        </div>
    </div>
    
    <!-- Auth Container (Login/Register) -->
    <div class="auth-container" id="authContainer">
        <div class="header">
            <h1><i class="fas fa-wallet"></i> My OHK Wallet <i class="fas fa-coins"></i></h1>
            <p>Your creative community reward system</p>
        </div>
        
        <div class="tabs">
            <div class="tab active" id="loginTab">Login</div>
            <div class="tab" id="registerTab">Register</div>
        </div>
        
        <!-- Login Form -->
        <form id="loginForm">
            <div class="alert alert-danger" id="loginAlert"></div>
            <div class="form-group">
                <label for="loginEmail">Email</label>
                <input type="email" id="loginEmail" class="form-control" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password</label>
                <input type="password" id="loginPassword" class="form-control" placeholder="Enter your password" required>
            </div>
            <div class="form-group">
                <button type="submit" class="btn">Login</button>
            </div>
            <div style="text-align: center; margin-top: 15px;">
                <a href="#" id="forgotPasswordLink">Forgot Password?</a>
            </div>
        </form>
        
        <!-- Register Form -->
        <form id="registerForm" style="display: none;">
            <div class="alert alert-danger" id="registerAlert"></div>
            <div class="form-group">
                <label for="registerName">Full Name</label>
                <input type="text" id="registerName" class="form-control" placeholder="Enter your full name" required>
            </div>
            <div class="form-group">
                <label for="registerPhone">Phone Number</label>
                <input type="tel" id="registerPhone" class="form-control" placeholder="Enter your phone number" required>
            </div>
            <div class="form-group">
                <label for="registerEmail">Email</label>
                <input type="email" id="registerEmail" class="form-control" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="registerPassword">Password</label>
                <input type="password" id="registerPassword" class="form-control" placeholder="Choose a password (min 6 characters)" required>
            </div>
            <div class="form-group">
                <button type="submit" class="btn">Register</button>
            </div>
        </form>
    </div>
    
    <!-- User Dashboard -->
    <div class="container dashboard" id="dashboardContainer">
        <div class="dashboard-header">
            <div>
                <h1><i class="fas fa-wallet"></i> Welcome to My OHK Wallet, <span id="userName">Artist</span>!</h1>
                <p>Your creative contribution dashboard</p>
            </div>
            <div style="display: flex; gap: 10px;">
                <button class="btn btn-secondary" id="accountSettingsBtn">Account Settings</button>
                <button class="btn" id="logoutBtn">Logout</button>
            </div>
        </div>
        
        <div class="token-display">
            <div class="token-card">
                <i class="fas fa-coins" style="font-size: 24px; color: var(--accent);"></i>
                <p>Available Tokens</p>
                <h3 id="availableTokens">0</h3>
            </div>
            <div class="token-card">
                <i class="fas fa-star" style="font-size: 24px; color: var(--accent);"></i>
                <p>Total Earned</p>
                <h3 id="totalEarned">0</h3>
            </div>
            <div class="token-card">
                <i class="fas fa-calendar-check" style="font-size: 24px; color: var(--accent);"></i>
                <p>Activities</p>
                <h3 id="workingDays">0</h3>
            </div>
        </div>
        
        <h2>Transaction History</h2>
        <div class="loading" id="historyLoading">
            <div class="spinner"></div>
            <p>Loading transaction history...</p>
        </div>
        <div class="history-table-container">
            <table class="history-table" id="historyTable">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Description</th>
                        <th>Tokens</th>
                        <th>Balance</th>
                    </tr>
                </thead>
                <tbody id="historyTableBody">
                    <!-- Transaction history will be populated here -->
                </tbody>
            </table>
        </div>
    </div>
    
    <!-- Admin Panel -->
    <div class="container admin-panel" id="adminContainer">
        <div class="dashboard-header">
            <div>
                <h1><i class="fas fa-sliders-h"></i> My OHK Wallet Admin Dashboard</h1>
                <p>Manage community rewards</p>
            </div>
            <div style="display: flex; gap: 10px;">
                <button class="btn btn-secondary" id="addUserBtn">Add User</button>
                <button class="btn btn-secondary" id="adminPasswordBtn">Change Password</button>
                <button class="btn" id="adminLogoutBtn">Logout</button>
            </div>
        </div>
        
        <div class="search-bar">
            <input type="text" id="searchInput" placeholder="Search volunteers by name or phone...">
        </div>
        
        <div class="user-list" id="userList">
            <!-- Users will be populated here -->
            <div class="loading" id="usersLoading">
                <div class="spinner"></div>
                <p>Loading volunteers...</p>
            </div>
        </div>
    </div>
    
    <!-- Admin Password Change Modal -->
    <div class="modal" id="adminPasswordModal">
        <div class="modal-content">
            <span class="close" id="closeAdminPasswordModal">&times;</span>
            <h2>Change Admin Password</h2>
            
            <div class="alert alert-success" id="adminPasswordSuccessAlert"></div>
            <div class="alert alert-danger" id="adminPasswordAlert"></div>
            
            <form id="adminPasswordForm">
                <div class="form-group">
                    <label for="adminCurrentPassword">Current Password</label>
                    <input type="password" id="adminCurrentPassword" class="form-control" placeholder="Enter current password" required>
                </div>
                <div class="form-group">
                    <label for="adminNewPassword">New Password</label>
                    <input type="password" id="adminNewPassword" class="form-control" placeholder="Enter new password (min 6 characters)" required>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn">Change Password</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Add User Modal -->
    <div class="modal" id="addUserModal">
        <div class="modal-content">
            <span class="close" id="closeAddUserModal">&times;</span>
            <h2>Add New User</h2>
            
            <form id="addUserForm">
                <div class="alert alert-danger" id="addUserAlert"></div>
                <div class="form-group">
                    <label for="addUserName">Full Name</label>
                    <input type="text" id="addUserName" class="form-control" placeholder="Enter full name" required>
                </div>
                <div class="form-group">
                    <label for="addUserPhone">Phone Number</label>
                    <input type="tel" id="addUserPhone" class="form-control" placeholder="Enter phone number" required>
                </div>
                <div class="form-group">
                    <label for="addUserEmail">Email</label>
                    <input type="email" id="addUserEmail" class="form-control" placeholder="Enter email" required>
                </div>
                <div class="form-group">
                    <label for="addUserPassword">Password</label>
                    <input type="password" id="addUserPassword" class="form-control" placeholder="Enter password (min 6 characters)" required>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn">Add User</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Token Management Modal -->
    <div class="modal" id="tokenModal">
        <div class="modal-content">
            <span class="close" id="closeTokenModal">&times;</span>
            <h2>Manage Tokens for <span id="modalUserName"></span></h2>
            <div class="token-display">
                <div class="token-card">
                    <p>Current Balance</p>
                    <h3 id="modalCurrentTokens">0</h3>
                </div>
                <div class="token-card">
                    <p>Working Days</p>
                    <h3 id="modalWorkingDays">0</h3>
                </div>
            </div>
            
            <!-- Quick Token Adjustment Buttons -->
            <div style="display: flex; gap: 5px; margin-bottom: 20px;">
                <button type="button" class="btn" id="quickAddBtn" style="flex: 1; font-size: 18px; font-weight: bold;">+1 Token</button>
                <button type="button" class="btn btn-danger" id="quickRemoveBtn" style="flex: 1; font-size: 18px; font-weight: bold;">-1 Token</button>
            </div>
            
            <form id="addTokensForm">
                <div class="form-group">
                    <label for="tokenAmount">Token Amount</label>
                    <input type="number" id="tokenAmount" class="form-control" placeholder="Enter token amount" required>
                </div>
                <div class="form-group">
                    <label for="tokenReason">Reason</label>
                    <input type="text" id="tokenReason" class="form-control" placeholder="Reason for adding/removing tokens" required>
                </div>
                
                <div style="display: flex; gap: 10px; margin-bottom: 20px;">
                    <button type="submit" class="btn" style="flex: 1">Add Tokens</button>
                    <button type="button" class="btn btn-danger" id="removeTokensBtn" style="flex: 1">Remove Tokens</button>
                </div>
                
                <div class="form-group">
                    <button type="button" class="btn btn-secondary" id="addWorkDayBtn" style="width: 100%;">Record one shift (+3 tokens)</button>
                </div>
            </form>
            
            <h3 style="margin: 20px 0 10px 0; color: var(--primary); background-color: #FFFFFF;">Transaction History</h3>
            <div class="history-table-container" style="max-height: 200px; overflow-y: auto; margin-bottom: 15px; background-color: #FFFFFF;">
                <table class="history-table" style="background-color: #FFFFFF;">
                    <thead>
                        <tr>
                            <th style="background-color: #F5F5F5;">Date</th>
                            <th style="background-color: #F5F5F5;">Description</th>
                            <th style="background-color: #F5F5F5;">Tokens</th>
                        </tr>
                    </thead>
                    <tbody id="modalHistoryTableBody">
                        <!-- Transaction history will be populated here -->
                    </tbody>
                </table>
            </div>
            
            <div style="margin-top: 20px; display: flex; justify-content: center;">
                <button class="btn btn-danger" id="deleteUserBtn" style="max-width: 200px;">Delete User</button>
            </div>
        </div>
    </div>
    
    <!-- Password Reset Modal -->
    <div class="modal" id="passwordResetModal">
        <div class="modal-content">
            <span class="close" id="closePasswordResetModal">&times;</span>
            <h2>Reset Password</h2>
            
            <div class="alert alert-success" id="passwordResetSuccessAlert"></div>
            <div class="alert alert-danger" id="passwordResetAlert"></div>
            
            <p style="margin-bottom: 20px;">Enter your email address and we'll send you a link to reset your password.</p>
            
            <form id="passwordResetForm">
                <div class="form-group">
                    <label for="resetEmail">Email</label>
                    <input type="email" id="resetEmail" class="form-control" placeholder="Enter your email" required>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn">Send Reset Email</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Account Settings Modal -->
    <div class="modal" id="accountSettingsModal">
        <div class="modal-content">
            <span class="close" id="closeAccountSettingsModal">&times;</span>
            <h2>Account Settings</h2>
            
            <div class="alert alert-success" id="accountSettingsSuccessAlert"></div>
            <div class="alert alert-danger" id="accountSettingsAlert"></div>
            
            <form id="changeUsernameForm">
                <h3 style="margin: 20px 0 10px 0;">Change Username</h3>
                <div class="form-group">
                    <label for="newUsername">New Username</label>
                    <input type="text" id="newUsername" class="form-control" placeholder="Enter new username" required>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-secondary">Update Username</button>
                </div>
            </form>
            
            <form id="changePasswordForm">
                <h3 style="margin: 20px 0 10px 0;">Change Password</h3>
                <div class="form-group">
                    <label for="currentPassword">Current Password</label>
                    <input type="password" id="currentPassword" class="form-control" placeholder="Enter current password" required>
                </div>
                <div class="form-group">
                    <label for="newPassword">New Password</label>
                    <input type="password" id="newPassword" class="form-control" placeholder="Enter new password (min 6 characters)" required>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn">Change Password</button>
                </div>
            </form>
            
            <div style="margin-top: 30px; border-top: 1px solid #E0E0E0; padding-top: 20px; background-color: #FFFFFF;">
                <h3 style="margin-bottom: 10px; color: #E53935; background-color: #FFFFFF;">Delete Account</h3>
                <p style="margin-bottom: 15px; background-color: #FFFFFF;">This action is permanent and cannot be undone. All your data will be deleted.</p>
                <div class="form-group" style="background-color: #FFFFFF;">
                    <button id="deleteAccountBtn" class="btn btn-danger">Delete My Account</button>
                </div>
            </div>
        </div>
    </div>

  <script>
        // Firebase Configuration 
      // For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: "AIzaSyAev2VvDz3FCxdZmZo2W2jpgACFh9Q_YlA",
  authDomain: "ohk-volunteers.firebaseapp.com",
  databaseURL: "https://ohk-volunteers-default-rtdb.europe-west1.firebasedatabase.app",
  projectId: "ohk-volunteers",
  storageBucket: "ohk-volunteers.firebasestorage.app",
  messagingSenderId: "637356396673",
  appId: "1:637356396673:web:e9cbfcf21dc509cadb7d80",
  measurementId: "G-R4KV130GN8"
};
        
        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();
        const database = firebase.database();
        
        // Firebase Database Paths
        const USERS_PATH = 'users';
        const TRANSACTIONS_PATH = 'transactions';
        const ADMINS_PATH = 'admins';
        const DEACTIVATED_USERS_PATH = 'deactivated_users';
        const DELETED_EMAILS_PATH = 'deleted_emails';
        
        // DOM Elements
        const authContainer = document.getElementById('authContainer');
        const dashboardContainer = document.getElementById('dashboardContainer');
        const adminContainer = document.getElementById('adminContainer');
        
        const loginTab = document.getElementById('loginTab');
        const registerTab = document.getElementById('registerTab');
        const loginForm = document.getElementById('loginForm');
        const registerForm = document.getElementById('registerForm');
        
        const loginAlert = document.getElementById('loginAlert');
        const registerAlert = document.getElementById('registerAlert');
        
        const logoutBtn = document.getElementById('logoutBtn');
        const adminLogoutBtn = document.getElementById('adminLogoutBtn');
        const accountSettingsBtn = document.getElementById('accountSettingsBtn');
        
        const userName = document.getElementById('userName');
        const availableTokens = document.getElementById('availableTokens');
        const totalEarned = document.getElementById('totalEarned');
        const workingDays = document.getElementById('workingDays');
        const historyTableBody = document.getElementById('historyTableBody');
        
        const searchInput = document.getElementById('searchInput');
        const userList = document.getElementById('userList');
        const addUserBtn = document.getElementById('addUserBtn');
        
        const tokenModal = document.getElementById('tokenModal');
        const closeTokenModal = document.getElementById('closeTokenModal');
        const modalUserName = document.getElementById('modalUserName');
        const modalCurrentTokens = document.getElementById('modalCurrentTokens');
        const modalWorkingDays = document.getElementById('modalWorkingDays');
        const quickAddBtn = document.getElementById('quickAddBtn');
        const quickRemoveBtn = document.getElementById('quickRemoveBtn');
        const addTokensForm = document.getElementById('addTokensForm');
        const tokenAmount = document.getElementById('tokenAmount');
        const tokenReason = document.getElementById('tokenReason');
        const removeTokensBtn = document.getElementById('removeTokensBtn');
        const addWorkDayBtn = document.getElementById('addWorkDayBtn');
        const modalHistoryTableBody = document.getElementById('modalHistoryTableBody');
        const deleteUserBtn = document.getElementById('deleteUserBtn');
        
        const passwordResetModal = document.getElementById('passwordResetModal');
        const closePasswordResetModal = document.getElementById('closePasswordResetModal');
        const passwordResetForm = document.getElementById('passwordResetForm');
        const resetEmail = document.getElementById('resetEmail');
        const passwordResetAlert = document.getElementById('passwordResetAlert');
        const passwordResetSuccessAlert = document.getElementById('passwordResetSuccessAlert');
        const forgotPasswordLink = document.getElementById('forgotPasswordLink');
        
        const addUserModal = document.getElementById('addUserModal');
        const closeAddUserModal = document.getElementById('closeAddUserModal');
        const addUserForm = document.getElementById('addUserForm');
        const addUserAlert = document.getElementById('addUserAlert');
        
        const accountSettingsModal = document.getElementById('accountSettingsModal');
        const closeAccountSettingsModal = document.getElementById('closeAccountSettingsModal');
        const changeUsernameForm = document.getElementById('changeUsernameForm');
        const newUsername = document.getElementById('newUsername');
        const changePasswordForm = document.getElementById('changePasswordForm');
        const accountSettingsAlert = document.getElementById('accountSettingsAlert');
        const accountSettingsSuccessAlert = document.getElementById('accountSettingsSuccessAlert');
        const deleteAccountBtn = document.getElementById('deleteAccountBtn');
        
        const historyLoading = document.getElementById('historyLoading');
        const usersLoading = document.getElementById('usersLoading');
        const loadingOverlay = document.getElementById('loading-overlay');
        const loadingMessage = document.getElementById('loadingMessage');
        
        const statusBar = document.getElementById('statusBar');
        const connectionStatus = document.getElementById('connectionStatus');
        const connectionInfo = document.getElementById('connectionInfo');
        
        // Admin Password Modal Elements
        const adminPasswordBtn = document.getElementById('adminPasswordBtn');
        const adminPasswordModal = document.getElementById('adminPasswordModal');
        const closeAdminPasswordModal = document.getElementById('closeAdminPasswordModal');
        const adminPasswordForm = document.getElementById('adminPasswordForm');
        const adminPasswordAlert = document.getElementById('adminPasswordAlert');
        const adminPasswordSuccessAlert = document.getElementById('adminPasswordSuccessAlert');

        // Current selected user in admin modal
        let selectedUserId = null;
        let isInitialized = false;
        
        // Initialize app and set up auth listener
        function initializeApp() {
            showLoading('Initializing application...');
            
            // Check connection status
            const connectedRef = database.ref('.info/connected');
            connectedRef.on('value', (snap) => {
                // Set connection status more subtly
                if (snap.val() === true) {
                    connectionStatus.textContent = 'Connected';
                    connectionStatus.className = 'status-connected';
                    connectionInfo.textContent = 'Data is syncing across devices';
                } else {
                    connectionStatus.textContent = 'Offline';
                    connectionStatus.className = 'status-disconnected';
                    connectionInfo.textContent = 'Check your connection';
                }
            });
            
            // Set up auth state listener
            auth.onAuthStateChanged(async (user) => {
                hideLoading();
                
                if (user) {
                    // User is signed in
                    try {
                        // First check if user profile exists in active users
                        const userSnapshot = await database.ref(`${USERS_PATH}/${user.uid}`).once('value');
                        
                        // If profile doesn't exist in active users, check if deactivated
                        if (!userSnapshot.exists()) {
                            // CHECK IF USER IS DEACTIVATED
                            const deactivatedSnapshot = await database.ref(`${DEACTIVATED_USERS_PATH}/${user.uid}`).once('value');
                            
                            if (deactivatedSnapshot.exists()) {
                                // User is deactivated - log them out
                                alert('This account has been deactivated. Please contact an administrator if you believe this is an error.');
                                await auth.signOut();
                                showAuthContainer();
                                return;
                            }
                        }
                        
                        // Continue with normal flow - either create profile or show dashboard
                        if (!userSnapshot.exists()) {
                            // If user auth exists but profile doesn't exist and not deactivated,
                            // create new profile
                            showLoading('Setting up your profile...');
                            await createUserProfile(user);
                            hideLoading();
                        }
                        
                        // Check if user is admin
                        const isAdmin = await checkIfAdmin(user.uid);
                        
                        if (isAdmin) {
                            await showAdminPanel();
                            // We're not adding the deactivated users button as requested
                        } else {
                            await showUserDashboard();
                        }
                    } catch (error) {
                        console.error('Error in auth state change:', error);
                        showAuthContainer();
                        alert('Error loading user data: ' + error.message);
                    }
                } else {
                    // User is signed out
                    showAuthContainer();
                }
                
                // Check if we need to create admin account on first run
                if (!isInitialized) {
                    isInitialized = true;
                    setupAdminIfNeeded();
                }
            });
        }
        
        // Check and create admin account if it doesn't exist
        async function setupAdminIfNeeded() {
            try {
                // Check if admins list exists
                const adminsSnapshot = await database.ref(ADMINS_PATH).once('value');
                
                if (!adminsSnapshot.exists() || adminsSnapshot.numChildren() === 0) {
                    // No admins exist, create default admin
                    showLoading('Setting up admin account...');
                    
                    try {
                        // Create admin auth account
                        const userCredential = await auth.createUserWithEmailAndPassword('admin@volunteer-system.com', 'admin123');
                        const user = userCredential.user;
                        
                        // Create admin profile
                        await database.ref(`${USERS_PATH}/${user.uid}`).set({
                            name: 'Admin User',
                            email: 'admin@volunteer-system.com',
                            phone: 'admin',
                            tokens: 0,
                            workingDays: 0
                        });
                        
                        // Mark user as admin
                        await database.ref(`${ADMINS_PATH}/${user.uid}`).set(true);
                        
                        alert('Default admin account created. Email: admin@volunteer-system.com, Password: admin123');
                    } catch (error) {
                        console.error('Error creating admin:', error);
                        // If admin already exists in auth but not in database
                        if (error.code === 'auth/email-already-in-use') {
                            alert('Admin account exists but may not be properly set up. Please sign in with admin@volunteer-system.com and password admin123');
                        }
                    } finally {
                        hideLoading();
                    }
                }
            } catch (error) {
                console.error('Error checking admin setup:', error);
            }
        }
        
        // Check if a user is an admin
        async function checkIfAdmin(uid) {
            const adminSnapshot = await database.ref(`${ADMINS_PATH}/${uid}`).once('value');
            return adminSnapshot.exists() && adminSnapshot.val() === true;
        }
        
        // Create user profile in database
        async function createUserProfile(user, additionalData = {}) {
            const userData = {
                name: additionalData.name || user.displayName || 'User',
                email: user.email,
                phone: additionalData.phone || '',
                tokens: 0,
                workingDays: 0
            };
            
            await database.ref(`${USERS_PATH}/${user.uid}`).set(userData);
            return userData;
        }
        
        // Show auth container
        function showAuthContainer() {
            authContainer.style.display = 'block';
            dashboardContainer.style.display = 'none';
            adminContainer.style.display = 'none';
        }
        
        // Show loading overlay
        function showLoading(message = 'Loading...') {
            loadingMessage.textContent = message;
            loadingOverlay.style.display = 'block';
        }
        
        // Hide loading overlay
        function hideLoading() {
            loadingOverlay.style.display = 'none';
        }
        
        // Tab switching
        loginTab.addEventListener('click', () => {
            loginTab.classList.add('active');
            registerTab.classList.remove('active');
            loginForm.style.display = 'block';
            registerForm.style.display = 'none';
        });
        
        registerTab.addEventListener('click', () => {
            registerTab.classList.add('active');
            loginTab.classList.remove('active');
            registerForm.style.display = 'block';
            loginForm.style.display = 'none';
        });
        
        // Login form submission
        loginForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            
            // Validate inputs
            if (!email || !password) {
                showAlert(loginAlert, 'Please fill in all fields');
                return;
            }
            
            showLoading('Signing in...');
            
            try {
                await auth.signInWithEmailAndPassword(email, password);
                // Auth state listener will handle redirection
            } catch (error) {
                console.error('Login error:', error);
                hideLoading();
                
                if (error.code === 'auth/user-not-found' || error.code === 'auth/wrong-password') {
                    showAlert(loginAlert, 'Invalid email or password');
                } else {
                    showAlert(loginAlert, `Login failed: ${error.message}`);
                }
            }
        });
        
        // Register form submission
        registerForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const name = document.getElementById('registerName').value;
            const phone = document.getElementById('registerPhone').value;
            const email = document.getElementById('registerEmail').value;
            const password = document.getElementById('registerPassword').value;
            
            // Validate inputs
            if (!name || !phone || !email || !password) {
                showAlert(registerAlert, 'Please fill in all fields');
                return;
            }
            
            if (password.length < 6) {
                showAlert(registerAlert, 'Password must be at least 6 characters');
                return;
            }
            
            showLoading('Creating your account...');
            
            try {
                // Check if this email was previously deleted/deactivated
                const encodedEmail = encodeURIComponent(email);
                const emailCheckSnapshot = await database.ref(`${DELETED_EMAILS_PATH}/${encodedEmail}`).once('value');
                
                if (emailCheckSnapshot.exists()) {
                    // This email was previously used by a deleted account
                    // We need to handle this specially
                    showAlert(registerAlert, 'This email was previously used. Please contact an administrator to reactivate your account or use a different email.');
                    hideLoading();
                    return;
                }
                
                // Create user in Firebase Auth
                const userCredential = await auth.createUserWithEmailAndPassword(email, password);
                const user = userCredential.user;
                
                // Create user profile
                await createUserProfile(user, { name, phone });
                
                // Auth state listener will handle redirection
            } catch (error) {
                console.error('Registration error:', error);
                hideLoading();
                
                if (error.code === 'auth/email-already-in-use') {
                    showAlert(registerAlert, 'Email is already in use. If you previously had an account, please contact an administrator.');
                } else if (error.code === 'auth/invalid-email') {
                    showAlert(registerAlert, 'Invalid email address');
                } else if (error.code === 'auth/weak-password') {
                    showAlert(registerAlert, 'Password is too weak');
                } else {
                    showAlert(registerAlert, `Registration failed: ${error.message}`);
                }
            }
        });
        
        // Logout buttons
        logoutBtn.addEventListener('click', logout);
        adminLogoutBtn.addEventListener('click', logout);
        
        // Search functionality
        searchInput.addEventListener('input', async () => {
            const searchTerm = searchInput.value.toLowerCase();
            await loadUsers(searchTerm);
        });
        
        // Token modal close
        closeTokenModal.addEventListener('click', () => {
            tokenModal.style.display = 'none';
        });
        
        // Add User Button
        addUserBtn.addEventListener('click', () => {
            addUserForm.reset();
            addUserAlert.style.display = 'none';
            addUserModal.style.display = 'block';
        });
        
        // Close Add User Modal
        closeAddUserModal.addEventListener('click', () => {
            addUserModal.style.display = 'none';
        });
        
        // Add User Form Submission
        addUserForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const name = document.getElementById('addUserName').value;
            const phone = document.getElementById('addUserPhone').value;
            const email = document.getElementById('addUserEmail').value;
            const password = document.getElementById('addUserPassword').value;
            
            // Validate inputs
            if (!name || !phone || !email || !password) {
                showAlert(addUserAlert, 'Please fill in all fields');
                return;
            }
            
            if (password.length < 6) {
                showAlert(addUserAlert, 'Password must be at least 6 characters');
                return;
            }
            
            showLoading('Adding new user...');
            
            try {
                // Create user with admin SDK (we're using client SDK here as a simplification)
                const userCredential = await auth.createUserWithEmailAndPassword(email, password);
                const user = userCredential.user;
                
                // Create user profile
                await createUserProfile(user, { name, phone });
                
                // Sign back in as admin (since we just created a new user)
                const adminUser = auth.currentUser;
                
                // Close modal and refresh user list
                addUserModal.style.display = 'none';
                await loadUsers(searchInput.value);
                
                hideLoading();
            } catch (error) {
                console.error('Add user error:', error);
                hideLoading();
                
                if (error.code === 'auth/email-already-in-use') {
                    showAlert(addUserAlert, 'Email is already in use');
                } else {
                    showAlert(addUserAlert, `Failed to add user: ${error.message}`);
                }
            }
        });
        
        // Account Settings Button
        accountSettingsBtn.addEventListener('click', () => {
            changePasswordForm.reset();
            accountSettingsAlert.style.display = 'none';
            accountSettingsSuccessAlert.style.display = 'none';
            accountSettingsModal.style.display = 'block';
        });
        
        // Close Account Settings Modal
        closeAccountSettingsModal.addEventListener('click', () => {
            accountSettingsModal.style.display = 'none';
        });
        
        // Admin Password Button
        adminPasswordBtn.addEventListener('click', () => {
            adminPasswordForm.reset();
            adminPasswordAlert.style.display = 'none';
            adminPasswordSuccessAlert.style.display = 'none';
            adminPasswordModal.style.display = 'block';
        });
        
        // Close Admin Password Modal
        closeAdminPasswordModal.addEventListener('click', () => {
            adminPasswordModal.style.display = 'none';
        });
        
        // Admin Password Form Submission
        adminPasswordForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const currentPassword = document.getElementById('adminCurrentPassword').value;
            const newPassword = document.getElementById('adminNewPassword').value;
            
            // Validate inputs
            if (!currentPassword || !newPassword) {
                showAlert(adminPasswordAlert, 'Please fill in all fields');
                return;
            }
            
            if (newPassword.length < 6) {
                showAlert(adminPasswordAlert, 'New password must be at least 6 characters');
                return;
            }
            
            showLoading('Changing password...');
            
            try {
                const user = auth.currentUser;
                
                // Reauthenticate user first
                const credential = firebase.auth.EmailAuthProvider.credential(user.email, currentPassword);
                await user.reauthenticateWithCredential(credential);
                
                // Update password
                await user.updatePassword(newPassword);
                
                // Show success message
                showSuccessAlert(adminPasswordSuccessAlert, 'Password changed successfully');
                
                // Reset form
                adminPasswordForm.reset();
                
                hideLoading();
            } catch (error) {
                console.error('Change admin password error:', error);
                hideLoading();
                
                if (error.code === 'auth/wrong-password') {
                    showAlert(adminPasswordAlert, 'Current password is incorrect');
                } else {
                    showAlert(adminPasswordAlert, `Failed to change password: ${error.message}`);
                }
            }
        });
        
        // Quick Add Token Button
        quickAddBtn.addEventListener('click', async () => {
            await addTokensToUser(selectedUserId, 1, "Quick token addition");
        });
        
        // Quick Remove Token Button
        quickRemoveBtn.addEventListener('click', async () => {
            await addTokensToUser(selectedUserId, -1, "Quick token removal");
        });
        
        // Forgot Password Link
        forgotPasswordLink.addEventListener('click', (e) => {
            e.preventDefault();
            
            // Pre-fill email if entered in login form
            const loginEmail = document.getElementById('loginEmail').value;
            resetEmail.value = loginEmail || '';
            
            // Reset alerts
            passwordResetAlert.style.display = 'none';
            passwordResetSuccessAlert.style.display = 'none';
            
            // Show modal
            passwordResetModal.style.display = 'block';
        });
        
        // Close Password Reset Modal
        closePasswordResetModal.addEventListener('click', () => {
            passwordResetModal.style.display = 'none';
        });
        
        // Password Reset Form Submission
        passwordResetForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const email = resetEmail.value;
            
            if (!email) {
                showAlert(passwordResetAlert, 'Please enter your email address');
                return;
            }
            
            showLoading('Sending password reset email...');
            
            try {
                await auth.sendPasswordResetEmail(email);
                hideLoading();
                showSuccessAlert(passwordResetSuccessAlert, 'Password reset email sent! Check your inbox.');
                resetEmail.value = '';
            } catch (error) {
                console.error('Password reset error:', error);
                hideLoading();
                
                if (error.code === 'auth/user-not-found') {
                    showAlert(passwordResetAlert, 'No account found with this email address');
                } else {
                    showAlert(passwordResetAlert, `Error sending reset email: ${error.message}`);
                }
            }
        });
        
        // Add Tokens Form Submission
        addTokensForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const amount = parseInt(tokenAmount.value);
            const reason = tokenReason.value;
            
            // Validate inputs
            if (!amount || !reason) {
                alert('Please fill in all fields');
                return;
            }
            
            await addTokensToUser(selectedUserId, amount, reason);
            
            // Reset form
            addTokensForm.reset();
        });
        
        // Remove Tokens Button Click
        removeTokensBtn.addEventListener('click', async () => {
            const amount = parseInt(tokenAmount.value);
            const reason = tokenReason.value;
            
            // Validate inputs
            if (!amount || !reason) {
                alert('Please fill in all fields');
                return;
            }
            
            await addTokensToUser(selectedUserId, -amount, reason);
            
            // Reset form
            addTokensForm.reset();
        });
        
        // Add Work Day Button Click
        addWorkDayBtn.addEventListener('click', async () => {
            await addWorkDayToUser(selectedUserId);
        });
        
        // Change Username Form Submission
        changeUsernameForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const username = newUsername.value;
            
            // Validate input
            if (!username) {
                showAlert(accountSettingsAlert, 'Please enter a username');
                return;
            }
            
            showLoading('Updating username...');
            
            try {
                const user = auth.currentUser;
                
                // Update profile in Firebase Auth
                await user.updateProfile({
                    displayName: username
                });
                
                // Update user data in Realtime Database
                await database.ref(`${USERS_PATH}/${user.uid}/name`).set(username);
                
                // Update UI
                userName.textContent = username;
                
                // Show success message
                showSuccessAlert(accountSettingsSuccessAlert, 'Username updated successfully');
                
                // Reset form
                newUsername.value = '';
                
                hideLoading();
            } catch (error) {
                console.error('Change username error:', error);
                hideLoading();
                showAlert(accountSettingsAlert, `Failed to update username: ${error.message}`);
            }
        });
        
        // Change Password Form Submission
        changePasswordForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const currentPassword = document.getElementById('currentPassword').value;
            const newPassword = document.getElementById('newPassword').value;
            
            // Validate inputs
            if (!currentPassword || !newPassword) {
                showAlert(accountSettingsAlert, 'Please fill in all fields');
                return;
            }
            
            if (newPassword.length < 6) {
                showAlert(accountSettingsAlert, 'New password must be at least 6 characters');
                return;
            }
            
            showLoading('Changing password...');
            
            try {
                const user = auth.currentUser;
                
                // Reauthenticate user first
                const credential = firebase.auth.EmailAuthProvider.credential(user.email, currentPassword);
                await user.reauthenticateWithCredential(credential);
                
                // Update password
                await user.updatePassword(newPassword);
                
                // Show success message
                showSuccessAlert(accountSettingsSuccessAlert, 'Password changed successfully');
                
                // Reset form
                changePasswordForm.reset();
                
                hideLoading();
            } catch (error) {
                console.error('Change password error:', error);
                hideLoading();
                
                if (error.code === 'auth/wrong-password') {
                    showAlert(accountSettingsAlert, 'Current password is incorrect');
                } else {
                    showAlert(accountSettingsAlert, `Failed to change password: ${error.message}`);
                }
            }
        });
        
        // Delete Account Button
        deleteAccountBtn.addEventListener('click', async () => {
            if (confirm('Are you sure you want to delete your account? This action cannot be undone.')) {
                await deleteUserAccount();
            }
        });
        
        // Delete User Button
        deleteUserBtn.addEventListener('click', async () => {
            // Show modal with options
            if (confirm('What would you like to do with this user account?\n\n- Click OK to deactivate the account (data preserved, can be restored)\n- Click Cancel to choose another option')) {
                // User chose to deactivate
                await deleteUser(selectedUserId, false);
                alert('User account has been deactivated. You can restore it from the Deactivated Users section.');
            } else {
                // Ask if they want to permanently delete
                if (confirm('Do you want to PERMANENTLY delete this user and all their data?\nThis action CANNOT be undone.')) {
                    if (confirm('FINAL WARNING: This will permanently erase all user data and cannot be recovered. Proceed?')) {
                        await deleteUser(selectedUserId, true);
                        alert('User account and all associated data has been permanently deleted.');
                    }
                }
            }
        });
        
        // Delete User Account
        async function deleteUserAccount() {
            showLoading('Deactivating your account...');
            
            try {
                const user = auth.currentUser;
                
                // First soft delete the user data
                const success = await deleteUser(user.uid, false);
                
                if (success) {
                    // Now sign out but DON'T delete the auth account
                    // This allows admins to reactivate if needed
                    await auth.signOut();
                    alert('Your account has been deactivated. Contact an administrator if you wish to restore it.');
                }
                
                // Auth state change will handle redirection
            } catch (error) {
                console.error('Delete account error:', error);
                hideLoading();
                
                if (error.code === 'auth/requires-recent-login') {
                    alert('Please login again before deleting your account');
                    logout();
                } else {
                    alert('Failed to deactivate account: ' + error.message);
                }
            }
        }
        
        // Delete User with soft deletion option
        async function deleteUser(userId, permanent = false) {
            showLoading(permanent ? 'Permanently deleting user...' : 'Deactivating user account...');
            
            try {
                // Get user data before deletion
                const userSnapshot = await database.ref(`${USERS_PATH}/${userId}`).once('value');
                
                if (!userSnapshot.exists()) {
                    throw new Error('User not found');
                }
                
                const userData = userSnapshot.val();
                
                // Get user transactions
                const transactionsSnapshot = await database.ref(TRANSACTIONS_PATH)
                    .orderByChild('userId')
                    .equalTo(userId)
                    .once('value');
                
                const transactions = {};
                if (transactionsSnapshot.exists()) {
                    transactionsSnapshot.forEach((transactionSnapshot) => {
                        transactions[transactionSnapshot.key] = transactionSnapshot.val();
                    });
                }
                
                if (permanent) {
                    // PERMANENT DELETION - Remove all data
                    const updates = {};
                    updates[`${USERS_PATH}/${userId}`] = null;
                    updates[`${ADMINS_PATH}/${userId}`] = null;
                    updates[`${DEACTIVATED_USERS_PATH}/${userId}`] = null;
                    
                    // Add transaction deletions to updates
                    if (transactionsSnapshot.exists()) {
                        transactionsSnapshot.forEach((transactionSnapshot) => {
                            updates[`${TRANSACTIONS_PATH}/${transactionSnapshot.key}`] = null;
                        });
                    }
                    
                    // Execute the multi-path update
                    await database.ref().update(updates);
                } else {
                    // SOFT DELETION - Move to deactivated users
                    const deactivatedData = {
                        userData: userData,
                        transactions: transactions,
                        deactivatedAt: new Date().toISOString(),
                        isAdmin: false // Will be updated if user is admin
                    };
                    
                    // Check if user is admin
                    const adminSnapshot = await database.ref(`${ADMINS_PATH}/${userId}`).once('value');
                    if (adminSnapshot.exists()) {
                        deactivatedData.isAdmin = true;
                    }
                    
                    // Create multi-path update
                    const updates = {};
                    
                    // Save to deactivated users
                    updates[`${DEACTIVATED_USERS_PATH}/${userId}`] = deactivatedData;
                    
                    // Remove from active users
                    updates[`${USERS_PATH}/${userId}`] = null;
                    updates[`${ADMINS_PATH}/${userId}`] = null;
                    
                    // Keep transactions in the main tree for simplicity
                    // This allows the system to maintain referential integrity
                    // If you want to hide them, you could add a 'deactivated' field to each
                    
                    // Execute the update
                    await database.ref().update(updates);
                }
                
                // If in admin panel, refresh user list and close modal
                if (adminContainer.style.display === 'block') {
                    await loadUsers(searchInput.value);
                    tokenModal.style.display = 'none';
                }
                
                hideLoading();
                
                return true;
            } catch (error) {
                console.error('Delete user error:', error);
                hideLoading();
                alert('Failed to process user account: ' + error.message);
                return false;
            }
        }
        
        // Show user dashboard
        async function showUserDashboard() {
            showLoading('Loading your dashboard...');
            
            try {
                const user = auth.currentUser;
                
                // Get user profile
                const userSnapshot = await database.ref(`${USERS_PATH}/${user.uid}`).once('value');
                
                if (!userSnapshot.exists()) {
                    throw new Error('User profile not found');
                }
                
                const userData = userSnapshot.val();
                
                authContainer.style.display = 'none';
                dashboardContainer.style.display = 'block';
                adminContainer.style.display = 'none';
                
                // Set username for the change form
                newUsername.value = userData.name || user.displayName || '';
                
                userName.textContent = userData.name || user.displayName || 'Volunteer';
                availableTokens.textContent = userData.tokens || 0;
                workingDays.textContent = userData.workingDays || 0;
                
                // Calculate total earned tokens
                const transactionsSnapshot = await database.ref(TRANSACTIONS_PATH)
                    .orderByChild('userId')
                    .equalTo(user.uid)
                    .once('value');
                
                let totalEarnedTokens = 0;
                if (transactionsSnapshot.exists()) {
                    transactionsSnapshot.forEach((transactionSnapshot) => {
                        const transaction = transactionSnapshot.val();
                        if (transaction.amount > 0) {
                            totalEarnedTokens += transaction.amount;
                        }
                    });
                }
                
                totalEarned.textContent = totalEarnedTokens;
                
                // Show loading
                historyLoading.style.display = 'block';
                historyTableBody.innerHTML = '';
                
                // Load transaction history
                await loadTransactionHistory(user.uid);
                historyLoading.style.display = 'none';
                
                hideLoading();
            } catch (error) {
                console.error('Error showing dashboard:', error);
                hideLoading();
                alert('Failed to load dashboard: ' + error.message);
                authContainer.style.display = 'block';
                dashboardContainer.style.display = 'none';
            }
        }
        
        // Show admin panel
        async function showAdminPanel() {
            showLoading('Loading admin panel...');
            
            try {
                authContainer.style.display = 'none';
                dashboardContainer.style.display = 'none';
                adminContainer.style.display = 'block';
                
                // Show loading
                usersLoading.style.display = 'block';
                
                // Load users
                await loadUsers();
                usersLoading.style.display = 'none';
                
                hideLoading();
            } catch (error) {
                console.error('Error showing admin panel:', error);
                hideLoading();
                alert('Failed to load admin panel: ' + error.message);
                authContainer.style.display = 'block';
                adminContainer.style.display = 'none';
            }
        }
        
        // Logout
        async function logout() {
            showLoading('Signing out...');
            
            try {
                await auth.signOut();
                // Auth state listener will handle redirection
            } catch (error) {
                console.error('Logout error:', error);
                hideLoading();
                alert('Failed to sign out: ' + error.message);
            }
        }
        
        // Load transaction history for a user
        async function loadTransactionHistory(userId) {
            try {
                const transactionsSnapshot = await database.ref(TRANSACTIONS_PATH)
                    .orderByChild('userId')
                    .equalTo(userId)
                    .once('value');
                
                historyTableBody.innerHTML = '';
                
                if (!transactionsSnapshot.exists()) {
                    const row = document.createElement('tr');
                    row.innerHTML = '<td colspan="4" style="text-align: center;">No transactions found</td>';
                    historyTableBody.appendChild(row);
                    return;
                }
                
                // Convert to array and sort by date
                const transactions = [];
                transactionsSnapshot.forEach((transactionSnapshot) => {
                    transactions.push(transactionSnapshot.val());
                });
                
                transactions.sort((a, b) => new Date(b.date) - new Date(a.date));
                
                let balance = 0;
                transactions.forEach(transaction => {
                    balance += transaction.amount;
                    
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${formatDate(transaction.date)}</td>
                        <td>${transaction.description}</td>
                        <td style="color: ${transaction.amount >= 0 ? 'green' : 'red'}">
                            ${transaction.amount >= 0 ? '+' : ''}${transaction.amount}
                        </td>
                        <td>${balance}</td>
                    `;
                    historyTableBody.appendChild(row);
                });
            } catch (error) {
                console.error('Error loading transaction history:', error);
                historyTableBody.innerHTML = '<tr><td colspan="4" style="text-align: center; color: red;">Error loading transaction history</td></tr>';
            }
        }
        
        // Load modal transaction history
        async function loadModalTransactionHistory(userId) {
            try {
                const transactionsSnapshot = await database.ref(TRANSACTIONS_PATH)
                    .orderByChild('userId')
                    .equalTo(userId)
                    .once('value');
                
                modalHistoryTableBody.innerHTML = '';
                
                if (!transactionsSnapshot.exists()) {
                    const row = document.createElement('tr');
                    row.innerHTML = '<td colspan="3" style="text-align: center;">No transactions found</td>';
                    modalHistoryTableBody.appendChild(row);
                    return;
                }
                
                // Convert to array and sort by date
                const transactions = [];
                transactionsSnapshot.forEach((transactionSnapshot) => {
                    transactions.push(transactionSnapshot.val());
                });
                
                transactions.sort((a, b) => new Date(b.date) - new Date(a.date));
                
                transactions.forEach(transaction => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${formatDate(transaction.date)}</td>
                        <td>${transaction.description}</td>
                        <td style="color: ${transaction.amount >= 0 ? 'green' : 'red'}">
                            ${transaction.amount >= 0 ? '+' : ''}${transaction.amount}
                        </td>
                    `;
                    modalHistoryTableBody.appendChild(row);
                });
            } catch (error) {
                console.error('Error loading modal transaction history:', error);
                modalHistoryTableBody.innerHTML = '<tr><td colspan="3" style="text-align: center; color: red;">Error loading transaction history</td></tr>';
            }
        }
        
        // Load users for admin panel
        async function loadUsers(searchTerm = '') {
            try {
                // Get all users except current admin
                const currentUser = auth.currentUser;
                const usersSnapshot = await database.ref(USERS_PATH).once('value');
                const users = [];
                
                usersSnapshot.forEach((userSnapshot) => {
                    const userId = userSnapshot.key;
                    const userData = userSnapshot.val();
                    
                    // Skip current admin
                    if (userId !== currentUser.uid) {
                        userData.id = userId; // Add ID to user data
                        users.push(userData);
                    }
                });
                
                // Filter by search term
                const filteredUsers = users.filter(user => {
                    if (!searchTerm) return true;
                    
                    const nameMatch = user.name && user.name.toLowerCase().includes(searchTerm.toLowerCase());
                    const phoneMatch = user.phone && user.phone.toLowerCase().includes(searchTerm.toLowerCase());
                    const emailMatch = user.email && user.email.toLowerCase().includes(searchTerm.toLowerCase());
                    
                    return nameMatch || phoneMatch || emailMatch;
                });
                
                userList.innerHTML = '';
                
                if (filteredUsers.length === 0) {
                    userList.innerHTML = '<div class="user-item" style="text-align: center;">No volunteers found</div>';
                    return;
                }
                
                filteredUsers.forEach(user => {
                    const userItem = document.createElement('div');
                    userItem.className = 'user-item';
                    userItem.innerHTML = `
                        <div class="user-info">
                            <h3>${user.name}</h3>
                            <p>${user.phone || 'No phone'} | ${user.email || 'No email'}</p>
                        </div>
                        <div class="user-stats">
                            <span class="badge badge-primary">${user.tokens || 0} Tokens</span>
                            <span class="badge" style="background: #f0f0f0; color: #333;">${user.workingDays || 0} Days</span>
                        </div>
                        <div class="user-actions">
                            <button class="btn manage-user" data-id="${user.id}">Manage</button>
                        </div>
                    `;
                    
                    userList.appendChild(userItem);
                    
                    // Add click event to manage button
                    userItem.querySelector('.manage-user').addEventListener('click', () => {
                        openTokenModal(user.id);
                    });
                });
            } catch (error) {
                console.error('Error loading users:', error);
                userList.innerHTML = '<div class="user-item" style="text-align: center; color: red;">Error loading volunteers</div>';
            }
        }
        
        // Open token management modal
        async function openTokenModal(userId) {
            showLoading('Loading user data...');
            
            try {
                const userSnapshot = await database.ref(`${USERS_PATH}/${userId}`).once('value');
                
                if (!userSnapshot.exists()) {
                    throw new Error('User not found');
                }
                
                const user = userSnapshot.val();
                selectedUserId = userId;
                
                modalUserName.textContent = user.name || 'User';
                modalCurrentTokens.textContent = user.tokens || 0;
                modalWorkingDays.textContent = user.workingDays || 0;
                
                await loadModalTransactionHistory(userId);
                
                tokenModal.style.display = 'block';
                
                hideLoading();
            } catch (error) {
                console.error('Error opening token modal:', error);
                hideLoading();
                alert('Failed to load user data: ' + error.message);
            }
        }
        
        // Add tokens to user
        async function addTokensToUser(userId, amount, reason) {
            showLoading(amount >= 0 ? 'Adding tokens...' : 'Removing tokens...');
            
            try {
                // Get current user data
                const userSnapshot = await database.ref(`${USERS_PATH}/${userId}`).once('value');
                
                if (!userSnapshot.exists()) {
                    throw new Error('User not found');
                }
                
                const user = userSnapshot.val();
                
                // Update tokens
                const currentTokens = user.tokens || 0;
                const newTokens = currentTokens + amount;
                
                // Create transaction
                const transactionId = generateId();
                const transaction = {
                    id: transactionId,
                    userId,
                    amount,
                    description: reason,
                    date: new Date().toISOString()
                };
                
                // Update database
                const updates = {};
                updates[`${USERS_PATH}/${userId}/tokens`] = newTokens;
                updates[`${TRANSACTIONS_PATH}/${transactionId}`] = transaction;
                
                await database.ref().update(updates);
                
                // Update modal
                modalCurrentTokens.textContent = newTokens;
                await loadModalTransactionHistory(userId);
                
                // Refresh user list if admin panel is visible
                if (adminContainer.style.display === 'block') {
                    await loadUsers(searchInput.value);
                }
                
                hideLoading();
            } catch (error) {
                console.error('Error adding tokens:', error);
                hideLoading();
                alert('Failed to update tokens: ' + error.message);
            }
        }
        
        // Add work day to user
        async function addWorkDayToUser(userId) {
            showLoading('Recording work day...');
            
            try {
                // Get current user data
                const userSnapshot = await database.ref(`${USERS_PATH}/${userId}`).once('value');
                
                if (!userSnapshot.exists()) {
                    throw new Error('User not found');
                }
                
                const user = userSnapshot.val();
                
                // Update working days and tokens
                const currentWorkingDays = user.workingDays || 0;
                const currentTokens = user.tokens || 0;
                
                const newWorkingDays = currentWorkingDays + 1;
                const newTokens = currentTokens + 3; // 3 tokens per working day (fixed from 5)
                
                // Create transaction
                const transactionId = generateId();
                const transaction = {
                    id: transactionId,
                    userId,
                    amount: 3, // 3 tokens per working day (fixed from 5)
                    description: `Worked day ${newWorkingDays}`,
                    date: new Date().toISOString()
                };
                
                // Update database
                const updates = {};
                updates[`${USERS_PATH}/${userId}/workingDays`] = newWorkingDays;
                updates[`${USERS_PATH}/${userId}/tokens`] = newTokens;
                updates[`${TRANSACTIONS_PATH}/${transactionId}`] = transaction;
                
                await database.ref().update(updates);
                
                // Update modal
                modalCurrentTokens.textContent = newTokens;
                modalWorkingDays.textContent = newWorkingDays;
                await loadModalTransactionHistory(userId);
                
                // Refresh user list if admin panel is visible
                if (adminContainer.style.display === 'block') {
                    await loadUsers(searchInput.value);
                }
                
                hideLoading();
            } catch (error) {
                console.error('Error adding work day:', error);
                hideLoading();
                alert('Failed to record work day: ' + error.message);
            }
        }
        
        // Show alert message
        function showAlert(alertElement, message) {
            alertElement.textContent = message;
            alertElement.style.display = 'block';
            
            // Ensure proper styling is applied
            if (alertElement.classList.contains('alert-danger')) {
                alertElement.style.backgroundColor = '#E53935';
                alertElement.style.color = 'white';
            }
            
            setTimeout(() => {
                alertElement.style.display = 'none';
            }, 5000); // Increased visibility time to 5 seconds
        }
        
        // Show success alert message
        function showSuccessAlert(alertElement, message) {
            alertElement.textContent = message;
            alertElement.style.display = 'block';
            
            // Ensure proper styling is applied
            if (alertElement.classList.contains('alert-success')) {
                alertElement.style.backgroundColor = '#43A047';
                alertElement.style.color = 'white';
            }
            
            setTimeout(() => {
                alertElement.style.display = 'none';
            }, 5000); // Increased visibility time to 5 seconds
        }
        
        // Generate random ID
        function generateId() {
            return Math.random().toString(36).substring(2, 15) + 
                   Math.random().toString(36).substring(2, 15);
        }
        
        // Format date
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
        }
        
        // Export user data to CSV
        async function exportUserData() {
            showLoading('Exporting data...');
            
            try {
                // Get current user
                const currentUser = auth.currentUser;
                
                // Get all users except current admin
                const usersSnapshot = await database.ref(USERS_PATH).once('value');
                const users = [];
                const userMap = {}; // Map to convert userId to name and phone
                
                usersSnapshot.forEach((userSnapshot) => {
                    const userId = userSnapshot.key;
                    const userData = userSnapshot.val();
                    
                    // Skip current admin
                    if (userId !== currentUser.uid) {
                        // Add user to users array without ID
                        users.push(userData);
                        
                        // Create a mapping of userId to name and phone
                        userMap[userId] = {
                            name: userData.name || 'Unknown',
                            phone: userData.phone || 'No Phone'
                        };
                    }
                });
                
                // Get all transactions
                const transactionsSnapshot = await database.ref(TRANSACTIONS_PATH).once('value');
                const transactions = [];
                
                transactionsSnapshot.forEach((transactionSnapshot) => {
                    const transaction = transactionSnapshot.val();
                    // Find user info for this transaction
                    const userInfo = userMap[transaction.userId] || { name: 'Unknown', phone: 'Unknown' };
                    // Add user info to transaction
                    transaction.userName = userInfo.name;
                    transaction.userPhone = userInfo.phone;
                    transactions.push(transaction);
                });
                
                // Create user data CSV without user IDs
                let userCsv = 'Name,Email,Phone,Tokens,Working Days\n';
                users.forEach(user => {
                    userCsv += `"${user.name || ''}","${user.email || ''}","${user.phone || ''}",${user.tokens || 0},${user.workingDays || 0}\n`;
                });
                
                // Create transaction data CSV with name and phone instead of user ID
                let transactionCsv = 'Transaction ID,Volunteer Name,Phone Number,Amount,Description,Date\n';
                transactions.forEach(transaction => {
                    transactionCsv += `"${transaction.id || ''}","${transaction.userName}","${transaction.userPhone}",${transaction.amount || 0},"${transaction.description || ''}","${transaction.date || ''}"\n`;
                });
                
                // Create download links
                const userBlob = new Blob([userCsv], { type: 'text/csv' });
                const transactionBlob = new Blob([transactionCsv], { type: 'text/csv' });
                
                const userLink = document.createElement('a');
                userLink.href = URL.createObjectURL(userBlob);
                userLink.download = 'volunteer_users.csv';
                
                const transactionLink = document.createElement('a');
                transactionLink.href = URL.createObjectURL(transactionBlob);
                transactionLink.download = 'volunteer_transactions.csv';
                
                // Trigger downloads
                userLink.click();
                setTimeout(() => {
                    transactionLink.click();
                }, 100);
                
                hideLoading();
            } catch (error) {
                console.error('Error exporting data:', error);
                hideLoading();
                alert('Failed to export data: ' + error.message);
            }
        }
        
        // Add export button to admin panel
        function addExportButton() {
            const adminHeader = document.querySelector('#adminContainer .dashboard-header');
            if (!adminHeader) return;
            
            const exportBtn = document.createElement('button');
            exportBtn.className = 'btn btn-secondary';
            exportBtn.style.marginRight = '10px';
            exportBtn.textContent = 'Export Data';
            exportBtn.addEventListener('click', exportUserData);
            
            const actionsDiv = adminHeader.querySelector('div:last-child');
            if (actionsDiv) {
                actionsDiv.prepend(exportBtn);
            }
        }
        
        // Add Deactivated Users Button to admin panel
        function addDeactivatedUsersButton() {
            const adminHeader = document.querySelector('#adminContainer .dashboard-header > div:last-child');
            if (!adminHeader) return;
            
            const deactivatedBtn = document.createElement('button');
            deactivatedBtn.className = 'btn btn-secondary';
            deactivatedBtn.id = 'deactivatedUsersBtn';
            deactivatedBtn.textContent = 'Deactivated Users';
            deactivatedBtn.addEventListener('click', showDeactivatedUsersModal);
            
            adminHeader.insertBefore(deactivatedBtn, adminHeader.firstChild);
        }
        
        // Create and show deactivated users modal
        async function showDeactivatedUsersModal() {
            // Create modal if it doesn't exist
            if (!document.getElementById('deactivatedUsersModal')) {
                const modal = document.createElement('div');
                modal.className = 'modal';
                modal.id = 'deactivatedUsersModal';
                
                modal.innerHTML = `
                    <div class="modal-content">
                        <span class="close" id="closeDeactivatedModal">&times;</span>
                        <h2>Deactivated Users</h2>
                        <p>Users who have been deactivated. You can restore or permanently delete them.</p>
                        
                        <div class="loading" id="deactivatedLoading">
                            <div class="spinner"></div>
                            <p>Loading deactivated users...</p>
                        </div>
                        
                        <div class="user-list" id="deactivatedUserList">
                            <!-- Deactivated users will be listed here -->
                        </div>
                    </div>
                `;
                
                document.body.appendChild(modal);
                
                // Add close button event
                document.getElementById('closeDeactivatedModal').addEventListener('click', () => {
                    document.getElementById('deactivatedUsersModal').style.display = 'none';
                });
            }
            
            // Show modal and load data
            document.getElementById('deactivatedUsersModal').style.display = 'block';
            document.getElementById('deactivatedLoading').style.display = 'block';
            
            await loadDeactivatedUsers();
            
            document.getElementById('deactivatedLoading').style.display = 'none';
        }
        
        // Load deactivated users
        async function loadDeactivatedUsers() {
            const deactivatedUserList = document.getElementById('deactivatedUserList');
            deactivatedUserList.innerHTML = '';
            
            try {
                const snapshot = await database.ref(DEACTIVATED_USERS_PATH).once('value');
                
                if (!snapshot.exists() || snapshot.numChildren() === 0) {
                    deactivatedUserList.innerHTML = '<div class="user-item" style="text-align: center;">No deactivated users found</div>';
                    return;
                }
                
                snapshot.forEach((userSnapshot) => {
                    const userId = userSnapshot.key;
                    const deactivatedData = userSnapshot.val();
                    const userData = deactivatedData.userData;
                    
                    const userItem = document.createElement('div');
                    userItem.className = 'user-item';
                    userItem.innerHTML = `
                        <div class="user-info">
                            <h3>${userData.name || 'Unknown'}</h3>
                            <p>${userData.phone || 'No phone'} | ${userData.email || 'No email'}</p>
                            <p style="color: #777; font-size: 12px;">Deactivated: ${formatDate(deactivatedData.deactivatedAt)}</p>
                        </div>
                        <div class="user-actions">
                            <button class="btn btn-secondary restore-user" data-id="${userId}">Restore</button>
                            <button class="btn btn-danger delete-user" data-id="${userId}">Delete Permanently</button>
                        </div>
                    `;
                    
                    deactivatedUserList.appendChild(userItem);
                    
                    // Add event listeners
                    userItem.querySelector('.restore-user').addEventListener('click', () => {
                        restoreUser(userId, deactivatedData);
                    });
                    
                    userItem.querySelector('.delete-user').addEventListener('click', () => {
                        if (confirm('Are you sure you want to permanently delete this user? This action cannot be undone.')) {
                            deleteUser(userId, true);
                            showDeactivatedUsersModal(); // Refresh list
                        }
                    });
                });
            } catch (error) {
                console.error('Error loading deactivated users:', error);
                deactivatedUserList.innerHTML = '<div class="user-item" style="text-align: center; color: red;">Error loading deactivated users</div>';
            }
        }
        
        // Restore a deactivated user
        async function restoreUser(userId, deactivatedData) {
            showLoading('Restoring user account...');
            
            try {
                const updates = {};
                
                // Restore user data
                updates[`${USERS_PATH}/${userId}`] = deactivatedData.userData;
                
                // Restore admin status if applicable
                if (deactivatedData.isAdmin) {
                    updates[`${ADMINS_PATH}/${userId}`] = true;
                }
                
                // Remove from deactivated users
                updates[`${DEACTIVATED_USERS_PATH}/${userId}`] = null;
                
                // Execute the update
                await database.ref().update(updates);
                
                hideLoading();
                alert('User account has been restored successfully.');
                
                // Refresh deactivated users list
                showDeactivatedUsersModal();
                
                // Refresh active users list if visible
                if (adminContainer.style.display === 'block') {
                    await loadUsers(searchInput.value);
                }
            } catch (error) {
                console.error('Error restoring user:', error);
                hideLoading();
                alert('Failed to restore user: ' + error.message);
            }
        }
        
        // Add CSS for deactivated users
        function addDeactivatedCSS() {
            const style = document.createElement('style');
            style.textContent = `
                /* Deactivated users modal styles */
                #deactivatedUserList .user-item {
                    border-left: 3px solid #E53935;
                }
                
                #deactivatedUserList .user-actions {
                    display: flex;
                    gap: 5px;
                }
                
                @media (max-width: 576px) {
                    #deactivatedUserList .user-actions {
                        flex-direction: column;
                        width: 100%;
                    }
                    
                    #deactivatedUserList .user-actions button {
                        width: 100%;
                        margin-top: 5px;
                    }
                    
                    /* Enhanced Mobile Styles for Admin Dashboard */
                    .dashboard-header > div:last-child {
                        flex-direction: column;
                        width: 100%;
                    }
                    
                    .dashboard-header > div:last-child button {
                        margin-bottom: 8px;
                        width: 100%;
                    }
                    
                    .dashboard-header h1 {
                        font-size: 18px;
                        white-space: normal !important;
                        line-height: 1.3;
                    }
                    
                    .dashboard-header p {
                        white-space: normal !important;
                    }
                    
                    .user-item {
                        flex-direction: column;
                        align-items: flex-start;
                    }
                    
                    .user-info {
                        margin-bottom: 10px;
                        width: 100%;
                    }
                    
                    .user-info h3 {
                        white-space: normal !important;
                        word-wrap: break-word;
                    }
                    
                    .user-info p {
                        white-space: normal !important;
                        word-wrap: break-word;
                    }
                    
                    .user-stats {
                        margin-bottom: 10px;
                        display: flex;
                        gap: 8px;
                    }
                    
                    .user-actions {
                        width: 100%;
                    }
                    
                    .user-actions button {
                        width: 100%;
                        margin-top: 5px;
                    }
                    
                    .search-bar {
                        margin-bottom: 15px;
                    }
                    
                    .search-bar input {
                        height: 48px; /* Larger tap target */
                    }
                    
                    #adminContainer h1, 
                    #adminContainer h2, 
                    #adminContainer h3, 
                    #adminContainer p {
                        white-space: normal !important;
                    }
                    
                    .modal-content {
                        padding: 20px 15px;
                        margin: 5% auto;
                        max-height: 85vh;
                    }
                }
            `;
            document.head.appendChild(style);
        }
        
        // Initialize the app
        document.addEventListener('DOMContentLoaded', () => {
            initializeApp();
            setTimeout(() => {
                addExportButton();
                addDeactivatedCSS();
            }, 1000);
        });
    </script>
</body>
</html>
